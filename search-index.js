var searchIndex = {};
searchIndex["rspec"] = {"doc":"","items":[[0,"events","rspec","",null,null],[4,"Event","rspec::events","",null,null],[13,"StartRunner","","",0,null],[13,"FinishedRunner","","",0,null],[13,"StartDescribe","","",0,null],[13,"EndDescribe","","",0,null],[13,"StartTest","","",0,null],[13,"EndTest","","",0,null],[8,"EventHandler","","",null,null],[10,"trigger","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[0,"context","rspec","",null,null],[3,"Context","rspec::context","",null,null],[12,"tests","","",2,null],[12,"before_each","","",2,null],[12,"after_each","","",2,null],[4,"Testable","","",null,null],[13,"Test","","Name and Test body",3,null],[13,"Describe","","Name and Describe body",3,null],[5,"describe","","",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"runner"}}],[5,"rdescribe","","",null,null],[6,"BeforeFunction","","",null,null],[6,"AfterFunction","","",null,null],[6,"TestFunction","","",null,null],[6,"TestResult","","",null,null],[11,"default","","",2,{"inputs":[],"output":{"name":"context"}}],[11,"describe","","",2,null],[11,"it","","",2,null],[11,"before","","",2,null],[11,"after","","",2,null],[0,"runner","rspec","",null,null],[3,"Runner","rspec::runner","",null,null],[3,"TestReport","","",null,null],[12,"total_tests","","",4,null],[12,"success_count","","",4,null],[12,"error_count","","",4,null],[6,"RunnerResult","","",null,null],[11,"new","","",5,{"inputs":[{"name":"context"}],"output":{"name":"runner"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"testreport"}}],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"run","","",5,null],[11,"result","","",5,null],[11,"add_event_handler","","",5,null],[0,"formatter","rspec","",null,null],[0,"formatter","rspec::formatter","",null,null],[8,"Formatter","rspec::formatter::formatter","",null,null],[0,"simple","rspec::formatter","",null,null],[3,"Simple","rspec::formatter::simple","",null,null],[12,"name_stack","","",6,null],[12,"failures","","",6,null],[11,"new","","",6,{"inputs":[{"name":"t"}],"output":{"name":"simple"}}],[11,"trigger","","",6,null]],"paths":[[4,"Event"],[8,"EventHandler"],[3,"Context"],[4,"Testable"],[3,"TestReport"],[3,"Runner"],[3,"Simple"]]};
searchIndex["expectest"] = {"doc":"Crate provides matchers and matcher functions for unit testing.","items":[[0,"prelude","expectest","A module contains reexport of all useful functions.",null,null],[5,"expect","expectest::prelude","Creates a new instance of `ActualValue` using `value`.",null,{"inputs":[{"name":"a"}],"output":{"name":"actualvalue"}}],[5,"be_equal_to","","Returns a new `BeEqualTo` matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"beequalto"}}],[5,"be_less_than","","Returns a new `PartialOrder` (less than) matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"partialorder"}}],[5,"be_less_or_equal_to","","Returns a new `PartialOrder` (less or equal to) matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"partialorder"}}],[5,"be_greater_than","","Returns a new `PartialOrder` (greater than) matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"partialorder"}}],[5,"be_greater_or_equal_to","","Returns a new `PartialOrder` (greater or equal to) matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"partialorder"}}],[5,"be_true","","Returns a new `BeTrue` matcher.",null,{"inputs":[],"output":{"name":"betrue"}}],[5,"be_false","","Returns a new `BeFalse` matcher.",null,{"inputs":[],"output":{"name":"befalse"}}],[5,"be_some","","Returns a new `BeSome` matcher.",null,{"inputs":[],"output":{"name":"besome"}}],[5,"be_none","","Returns a new `BeNone` matcher.",null,{"inputs":[],"output":{"name":"benone"}}],[5,"be_ok","","Returns a new `BeOk` matcher.",null,{"inputs":[],"output":{"name":"beok"}}],[5,"be_err","","Returns a new `BeErr` matcher.",null,{"inputs":[],"output":{"name":"beerr"}}],[5,"be_close_to","","Returns a new `BeCloseTo` matcher with default `delta` equal to `0.001`.",null,{"inputs":[{"name":"e"}],"output":{"name":"becloseto"}}],[5,"be_empty","","Returns a new `BeEmpty` matcher.",null,{"inputs":[],"output":{"name":"beempty"}}],[5,"have_count","","Returns a new `HaveCount` matcher.",null,{"inputs":[{"name":"usize"}],"output":{"name":"havecount"}}],[0,"core","expectest","A module contains core types of this library.",null,null],[3,"SourceLocation","expectest::core","Represents a location in a source code.",null,null],[12,"file","","Name of a file.",0,null],[12,"line","","Number of line in the file.",0,null],[3,"ActualValue","","Represent an actual value and optional location of a test case in a source code.",null,null],[3,"Failure","","Represents data for `Failure` variant of a `TestResult`.",null,null],[4,"Join","","An enum used to join two parts of a failure message.",null,null],[13,"To","","&quot;to&quot; join.",1,null],[13,"ToNot","","&quot;to not&quot; join.",1,null],[13,"NotTo","","&quot;not to&quot; join.",1,null],[4,"TestResult","","Represents result of unit testing.",null,null],[13,"Success","","Denotes success.",2,null],[13,"Failure","","Denotes failure.",2,null],[5,"expect","","Creates a new instance of `ActualValue` using `value`.",null,{"inputs":[{"name":"a"}],"output":{"name":"actualvalue"}}],[11,"clone","","",0,null],[11,"new","","Creates a new instance of `SourceLocation` using `file` and `line`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"sourcelocation"}}],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",3,null],[11,"new","","Creates a new instance of `ActualValue` using `value`.",3,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"location","","Sets a new `SourceLocation`.",3,null],[11,"to","","Performs assertion matching using `matcher`. Returns a new instance of `TestResult`.",3,null],[11,"to_not","","Performs negation matching using `matcher`. Returns a new instance of `TestResult`.",3,null],[11,"not_to","","Performs negation matching using `matcher`. Returns a new instance of `TestResult`.",3,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"is_assertion","","Checks if `Join` is assertion.",1,null],[11,"fmt","","",2,null],[11,"new_success","","Creates a new instance of `TestResult` with a `Success` variant.",2,{"inputs":[],"output":{"name":"self"}}],[11,"new_failure","","Creates a new instance of `TestResult` with a `Failure` variant using message\nand location.",2,{"inputs":[{"name":"string"},{"name":"option"}],"output":{"name":"self"}}],[11,"assert_eq_message","","Asserts that `message` is equal to the failure message.",2,null],[11,"fmt","","",4,null],[11,"drop","","",4,null],[8,"Matcher","","A Matcher trait.",null,null],[10,"failure_message","","Returns a failure message.",5,null],[10,"matches","","Checks if an actual value matches an expected value.",5,null],[0,"matchers","expectest","A module contains matchers.",null,null],[3,"BeEqualTo","expectest::matchers","A matcher for `be_equal_to` assertions for types that conforms to\n`PartialEq` trait.",null,null],[3,"PartialOrder","","A matcher for types that conforms to `PartialOrd` trait.",null,null],[3,"BeTrue","","A matcher for `be_true` assertions.",null,null],[3,"BeFalse","","A matcher for `be_false` assertions.",null,null],[3,"BeSome","","A matcher for `be_some` assertions for `Option&lt;T&gt;` types.",null,null],[3,"BeNone","","A matcher for `be_none` assertions for `Option&lt;T&gt;` types.",null,null],[3,"BeOk","","A matcher for `be_ok` assertions for `Result&lt;T, E&gt;` type.",null,null],[3,"BeErr","","A matcher for `be_err` assertions for `Result&lt;T, E&gt;` type.",null,null],[3,"BeCloseTo","","A matcher for `be_close_to` assertions for float numbers.",null,null],[3,"BeEmpty","","A matcher for `be_empty` assertions.",null,null],[3,"HaveCount","","A matcher for `have_count` assertions.",null,null],[5,"be_equal_to","","Returns a new `BeEqualTo` matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"beequalto"}}],[5,"be_less_than","","Returns a new `PartialOrder` (less than) matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"partialorder"}}],[5,"be_less_or_equal_to","","Returns a new `PartialOrder` (less or equal to) matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"partialorder"}}],[5,"be_greater_than","","Returns a new `PartialOrder` (greater than) matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"partialorder"}}],[5,"be_greater_or_equal_to","","Returns a new `PartialOrder` (greater or equal to) matcher.",null,{"inputs":[{"name":"e"}],"output":{"name":"partialorder"}}],[5,"be_true","","Returns a new `BeTrue` matcher.",null,{"inputs":[],"output":{"name":"betrue"}}],[5,"be_false","","Returns a new `BeFalse` matcher.",null,{"inputs":[],"output":{"name":"befalse"}}],[5,"be_some","","Returns a new `BeSome` matcher.",null,{"inputs":[],"output":{"name":"besome"}}],[5,"be_none","","Returns a new `BeNone` matcher.",null,{"inputs":[],"output":{"name":"benone"}}],[5,"be_ok","","Returns a new `BeOk` matcher.",null,{"inputs":[],"output":{"name":"beok"}}],[5,"be_err","","Returns a new `BeErr` matcher.",null,{"inputs":[],"output":{"name":"beerr"}}],[5,"be_close_to","","Returns a new `BeCloseTo` matcher with default `delta` equal to `0.001`.",null,{"inputs":[{"name":"e"}],"output":{"name":"becloseto"}}],[5,"be_empty","","Returns a new `BeEmpty` matcher.",null,{"inputs":[],"output":{"name":"beempty"}}],[5,"have_count","","Returns a new `HaveCount` matcher.",null,{"inputs":[{"name":"usize"}],"output":{"name":"havecount"}}],[11,"failure_message","","",6,null],[11,"matches","","",6,null],[11,"failure_message","","",7,null],[11,"matches","","",7,null],[11,"failure_message","","",8,null],[11,"matches","","",8,null],[11,"failure_message","","",9,null],[11,"matches","","",9,null],[11,"value","","Returns a new `BeSomeValue` matcher.",10,null],[11,"failure_message","","",10,null],[11,"matches","","",10,null],[11,"failure_message","","",11,null],[11,"matches","","",11,null],[11,"value","","Returns a new `BeOkValue` matcher.",12,null],[11,"failure_message","","",12,null],[11,"matches","","",12,null],[11,"value","","Returns a new `BeErrValue` matcher.",13,null],[11,"failure_message","","",13,null],[11,"matches","","",13,null],[11,"delta","","Sets new `delta` value.",14,null],[11,"failure_message","","",14,null],[11,"matches","","",14,null],[11,"failure_message","","",15,null],[11,"matches","","",15,null],[11,"failure_message","","",16,null],[11,"matches","","",16,null],[14,"expect!","expectest","A macro intended to use instead of `expect` function.",null,null]],"paths":[[3,"SourceLocation"],[4,"Join"],[4,"TestResult"],[3,"ActualValue"],[3,"Failure"],[8,"Matcher"],[3,"BeEqualTo"],[3,"PartialOrder"],[3,"BeTrue"],[3,"BeFalse"],[3,"BeSome"],[3,"BeNone"],[3,"BeOk"],[3,"BeErr"],[3,"BeCloseTo"],[3,"BeEmpty"],[3,"HaveCount"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
initSearch(searchIndex);
